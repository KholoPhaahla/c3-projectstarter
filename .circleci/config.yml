version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
      #workflow_id:
        #type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force   

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/CnNKHLPoKT92fEm3Tbxcq/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
           #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: cimg/node:16.15.1
       # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm update
             npm run test
       # Checkout code from git
       # Restore from cache
       # Your job code here
                
  test-backend:
   docker:
    - image: cimg/node:16.15.0
       # Docker image here
   steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test
  scan-frontend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
  scan-backend:
     docker:
       - image: cimg/node:13.8.0
     steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
         
  deploy-infrastructure:
     docker:
        - image: amazon/aws-cli
     steps:
       - checkout
       - restore_cache:
          keys: [frontend-build,backend-build]
       - run:
           name: install  gzip and tar
           command: |
             yum install -y tar gzip 
       - run:
           name: Ensure back-end infrastructure exists
           command: |
             aws cloudformation deploy --debug \
               --template-file=.circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=udapeople
#              exit 1
       - run:
           name: Ensure front-end infrastructure exist
           command: |
             aws cloudformation deploy --debug \
               --template-file=.circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=udapeople
       - run:
           name: Add back-end ip to ansible inventory
           command: |
             cd .circleci/ansible
             aws ec2 describe-instances \
             \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople" \
                    --output text >> inventory.txt
              cat inventory.txt
              cd ..
       - persist_to_workspace:
           root: ~/
           paths:
             - project/.circleci/ansible/inventory.txt
       - destroy-environment
  configure-infrastructure:
     docker:
       - image: python:3.7-alpine3.11
     steps:
       - checkout
       - add_ssh_keys:
           fingerprints: ["62:08:7c:06:0b:40:b4:77:12:0e:5c:3e:34:2b:96:ce"]
       - attach_workspace:
          at: .
       - run:
           name: install aws-cli
           command: |
             apk add --no-cache \
             python3 \
             py3-pip \
             && pip3 install --upgrade pip \
             && pip3 install \
             awscli \
             && rm -rf /var/cache/apk/*
       - run:
           name: Install dependencies
           command: |
             apk add --update ansible
       - run:
           name: Configure server
           command: |
             cd .circleci/ansible
             aws ec2 describe-instances \
             \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople" \
                    --output text >> inventory.txt
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml --private-key udacity.pem
       - destroy-environment

  run-migrations:
     docker:
       - image: cimg/node:16.15.1
     steps:
       - checkout
       - restore_cache:
          keys: [backend-build]
       - run:
           name: Run migrations
           command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
       - run:
           name: Send migration results to memstash
           command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
                curl https://kvdb.io/CnNKHLPoKT92fEm3Tbxcq/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi
  deploy-frontend:
     docker:
        - image: amazon/aws-cli
     steps:
       - checkout
       - run:
           name: install  gzip and tar
           command: |
             yum install -y tar gzip
             yum install -y tar curl
       - run:
           name: install  NodeJS npm
           command: |
             curl -sL https://rpm.nodesource.com/setup_13.x | bash -
             yum install -y nodejs npm
       - attach_workspace:
          at: .
       - run:
           name: Get backend url
           command: |
             export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running | grep PublicIpAddress | grep -o -P "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.')
             export API_URL="http://${BACKEND_IP}:3030"
             echo "API_URL = ${API_URL}"
             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
             cat frontend/.env
             export API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
       - run:
           name: Deploy frontend objects
           command: |
             cd frontend
             npm install
             npm run build
             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
       - destroy-environment
       - revert-migrations
  deploy-backend:
     docker:
       - image: amazon/aws-cli
     steps:
       - checkout
       - add_ssh_keys:
           fingerprints: ["62:08:7c:06:0b:40:b4:77:12:0e:5c:3e:34:2b:96:ce"]
       - attach_workspace:
          at: ~/
       - restore_cache:
          keys: [backend-build]
       - run:
           name: install  NodeJS
           command: |
             curl -sL https://rpm.nodesource.com/setup_13.x | bash -
             yum install -y nodejs npm
       - run:
           name: install  gzip and tar
           command: |
             yum install -y tar gzip
             yum install -y tar curl
       - run:
           name: install ansible
           command: |
             yum install -y ansible
       - run:
           name: Deploy backend
           command: |
             cd backend
             npm i
             npm run build
             cd ..
             tar -C backend -czvf artifact.tar.gz .
             cp artifact.tar.gz .circleci/ansible/roles/deploy/tasks/artifact.tar.gz
             export TYPEORM_MIGRATIONS_DIR=./migrations
             export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
             export TYPEORM_MIGRATIONS=./migrations/*.ts
             cd .circleci/ansible
             aws ec2 describe-instances \
             \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople" \
                    --output text >> inventory.txt
             echo "Contents  of the inventory.txt file is -------"
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml --private-key udacity.pem
             exit 0
       - destroy-environment
       - revert-migrations

  smoke-test:
     docker:
       - image: python:3.7-alpine3.11
       # Lightweight Docker image 
     steps:
       - checkout
       - run:
           name: install  NodeJS
           command: |
             apk add --update nodejs npm
       - run:
           name: install aws-cli
           command: |
             apk add --no-cache \
             python3 \
             py3-pip \
             && pip3 install --upgrade pip \
             && pip3 install \
             awscli \
             && rm -rf /var/cache/apk/*
       - run:
           name: install  curl
           command: |
             apk add --update curl
       - run:
           name: Get backend url
           command: |
             export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running | grep PublicIpAddress | grep -o -E "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.')
             #export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running  --query 'Reservations[*].Instances[*].PublicIpAddress')
             #export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running --query 'Reservations[*].Instances[*].PublicIpAddress' | grep -o -E "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.')
             export API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
       - run:
           name: Frontend smoke test.
           command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then  
                 # Change this to 0 after the job fails
                 return 0
              else
                 return 1
              fi
       - run:
           name: Backend smoke test.
           command: |
             export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running | grep PublicIpAddress | grep -o -E "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.')
             #export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running  --query 'Reservations[*].Instances[*].PublicIpAddress')
             #export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  Name=instance-state-name,Values=running --query 'Reservations[*].Instances[*].PublicIpAddress' | grep -o -E "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.')
             export API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
             if curl "${API_URL}/api/status" | grep "ok"
             then
                return 0
             else
                return 1
             fi
       - destroy-environment
       - revert-migrations
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]